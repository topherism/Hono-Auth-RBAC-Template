// src/routes/auth/auth.index.ts

import { createRouter } from "@/lib/create-app";
import * as handlers from "./auth.handlers";
import * as routes from "./auth.routes";
import {
  ipRateLimiter,
  tokenRateLimiter,
} from "@/middlewares/rate-limit.middleware";
import { Hono } from "hono";
import { AppBindings } from "@/lib/types";

/**
 * 1️⃣ This is the main RPC/OpenAPI router.
 *    - Each `.openapi()` call registers a route with its handler.
 *    - The handlers are type-safe, so your `.client` calls generated by Hono/Zod-OpenAPI
 *      will have full type safety.
 *    - **Important:** OpenAPIHono's `.openapi()` only accepts:
 *        1. RouteConfig
 *        2. A single handler
 *      → It does **not** accept middleware as additional arguments.
 */
const router = createRouter()
  .openapi(routes.login, handlers.login)
  .openapi(routes.logout, handlers.logout)
  .openapi(routes.logout_all, handlers.logout_all)
  .openapi(routes.refresh, handlers.refresh);

// attach per-route middleware separately
router.use(routes.login.path, ipRateLimiter);
router.use(routes.refresh.path, tokenRateLimiter);

export default router;
