// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) // PK
  email     String   @unique // unique email
  username  String?  @unique // optional, unique if set
  password  String // hashed password
  createdAt DateTime @default(now()) @map("create_at")

  // Relations
  roles             UserRole[] // many roles
  permissions       UserPermission[] // many permissions
  deniedPermissions UserDeniedPermission[] // many denied perms
  refreshTokens     RefreshToken[] // many sessions

  // âœ… User must always have UserInfo
  userInfo UserInfo?
}

model UserInfo {
  userId String @id // PK = FK to User.id
  user       User    @relation(fields: [userId], references: [id])
  firstName  String  @map("first_name")
  middleName String? @map("middle_name")
  lastName   String  @map("last_name")
}

//////////////////////////////
// Roles
//////////////////////////////
model Role {
  id        Int              @id @default(autoincrement())
  name      String           @unique
  rolePerms RolePermission[] // default permissions of this role
  userRoles UserRole[]
}

//////////////////////////////
// Permissions
//////////////////////////////
model Permission {
  id          Int                    @id @default(autoincrement())
  name        String                 @unique
  rolePerms   RolePermission[]
  userPerms   UserPermission[]
  deniedPerms UserDeniedPermission[]
}

//////////////////////////////
// RolePermission (default permissions of a role)
//////////////////////////////
model RolePermission {
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@id([roleId, permissionId])
}

//////////////////////////////
// UserRole (users can have multiple roles)
//////////////////////////////
model UserRole {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, roleId])
}

//////////////////////////////
// UserPermission (additional permissions beyond role)
//////////////////////////////
model UserPermission {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@id([userId, permissionId])
}

//////////////////////////////
// UserDeniedPermission (to remove/deny permission from role)
//////////////////////////////
model UserDeniedPermission {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@id([userId, permissionId])
}

model RefreshToken {
  jti       String    @id // store JTI here
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  revokedAt DateTime? @map("revoked_at")
  createdAt DateTime  @default(now()) @map("created_at")
  expiresAt DateTime  @map("expires_at")

  @@index([userId])
}
